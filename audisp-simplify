#!/bin/env perl
################################################################################
# 20130928 Kirby  v1.0
# 20131001 Kirby  v1.0.1
# 20131004 Kirby  v1.0.2
# 20131006 Kirby  v1.0.3
# 20140314 Kirby  v1.0.4
# 20150628 Kirby  v1.0.5
# 20150724 Kirby  v1.0.6
# 20150728 Kirby  v1.0.7
# 20161007 Kirby  v1.0.8
# 20170129 Kirby  v1.0.9
# 20170129 Kirby  v1.0.10
# 20170130 Kirby  v1.0.11
# 20170130 Kirby  v1.0.12
################################################################################

# LICENSE
#
#    audisp-simplify is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    audisp-simplify is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with audisp-simplify; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use POSIX qw(strftime);
use strict;
umask 0077;

# mitigation for bug with timezone
$ENV{TZ} = strftime( "%Z", localtime() );

# https://raw.githubusercontent.com/linux-audit/audit-documentation/master/specs/fields/field-dictionary.csv
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/app-Audit_Reference.html#sec-Audit_Events_Fields

&Main;

#################################################################################
sub Main {
    my $argc;
    my $args;
    my $auditid;
    my @ausearch;
    my $ausearch;
    my $cmd;
    my @command;
    my @cleancmd;
    my $date;
    my $epoch;
    my $event;
    my $exe;
    my $ignorefile = '/etc/audisp/simplify.ignores';
    my $ignorekey;
    my %ignores;
    my $ignorestring;
    my $key;
    my $log;
    my $logfile = '/var/log/audisp-simplify';
    my $saddr;
    my %sh;
    my $subkey;
    my $time;
    my %tracker;
    my %errno;
    my %errcode;
    
    # I realize that using the Errno module would be easier, but this takes less cpu.
    %errno = (
        1 => "EPERM",
        2 => "ENOENT",
        3 => "ESRCH",
        4 => "EINTR",
        5 => "EIO",
        6 => "ENXIO",
        7 => "E2BIG",
        8 => "ENOEXEC",
        9 => "EBADF",
        10 => "ECHILD",
        11 => "EAGAIN",
        12 => "ENOMEM",
        13 => "EACCES",
        14 => "EFAULT",
        15 => "ENOTBLK",
        16 => "EBUSY",
        17 => "EEXIST",
        18 => "EXDEV",
        19 => "ENODEV",
        20 => "ENOTDIR",
        21 => "EISDIR",
        22 => "EINVAL",
        23 => "ENFILE",
        24 => "EMFILE",
        25 => "ENOTTY",
        26 => "ETXTBSY",
        27 => "EFBIG",
        28 => "ENOSPC",
        29 => "ESPIPE",
        30 => "EROFS",
        31 => "EMLINK",
        32 => "EPIPE",
        33 => "EDOM",
        34 => "ERANGE",
        35 => "EDEADLK",
        36 => "ENAMETOOLONG",
        37 => "ENOLCK",
        38 => "ENOSYS",
        39 => "ENOTEMPTY",
        40 => "ELOOP",
        42 => "ENOMSG",
        43 => "EIDRM",
        44 => "ECHRNG",
        45 => "EL2NSYNC",
        46 => "EL3HLT",
        47 => "EL3RST",
        48 => "ELNRNG",
        49 => "EUNATCH",
        50 => "ENOCSI",
        51 => "EL2HLT",
        52 => "EBADE",
        53 => "EBADR",
        54 => "EXFULL",
        55 => "ENOANO",
        56 => "EBADRQC",
        57 => "EBADSLT",
        59 => "EBFONT",
        60 => "ENOSTR",
        61 => "ENODATA",
        62 => "ETIME",
        63 => "ENOSR",
        64 => "ENONET",
        65 => "ENOPKG",
        66 => "EREMOTE",
        67 => "ENOLINK",
        68 => "EADV",
        69 => "ESRMNT",
        70 => "ECOMM",
        71 => "EPROTO",
        72 => "EMULTIHOP",
        73 => "EDOTDOT",
        74 => "EBADMSG",
        75 => "EOVERFLOW",
        76 => "ENOTUNIQ",
        77 => "EBADFD",
        78 => "EREMCHG",
        79 => "ELIBACC",
        80 => "ELIBBAD",
        81 => "ELIBSCN",
        82 => "ELIBMAX",
        83 => "ELIBEXEC",
        84 => "EILSEQ",
        85 => "ERESTART",
        86 => "ESTRPIPE",
        87 => "EUSERS",
        88 => "ENOTSOCK",
        89 => "EDESTADDRREQ",
        90 => "EMSGSIZE",
        91 => "EPROTOTYPE",
        92 => "ENOPROTOOPT",
        93 => "EPROTONOSUPPORT",
        94 => "ESOCKTNOSUPPORT",
        95 => "EOPNOTSUPP",
        96 => "EPFNOSUPPORT",
        97 => "EAFNOSUPPORT",
        98 => "EADDRINUSE",
        99 => "EADDRNOTAVAIL",
        100 => "ENETDOWN",
        101 => "ENETUNREACH",
        102 => "ENETRESET",
        103 => "ECONNABORTED",
        104 => "ECONNRESET",
        105 => "ENOBUFS",
        106 => "EISCONN",
        107 => "ENOTCONN",
        108 => "ESHUTDOWN",
        109 => "ETOOMANYREFS",
        110 => "ETIMEDOUT",
        111 => "ECONNREFUSED",
        112 => "EHOSTDOWN",
        113 => "EHOSTUNREACH",
        114 => "EALREADY",
        115 => "EINPROGRESS",
        116 => "ESTALE",
        117 => "EUCLEAN",
        118 => "ENOTNAM",
        119 => "ENAVAIL",
        120 => "EISNAM",
        121 => "EREMOTEIO",
        122 => "EDQUOT",
        123 => "ENOMEDIUM",
        124 => "EMEDIUMTYPE",
        125 => "ECANCELED",
        126 => "ENOKEY",
        127 => "EKEYEXPIRED",
        128 => "EKEYREVOKED",
        129 => "EKEYREJECTED",
        130 => "EOWNERDEAD",
        131 => "ENOTRECOVERABLE",
        132 => "ERFKILL",
        133 => "EHWPOISON",
        514 => "ERESTARTNOHAND",
        515 => "ENOIOCTLCMD",
        516 => "ERESTART_RESTARTBLOCK",
        517 => "EPROBE_DEFER",
        518 => "EOPENSTALE",
        521 => "EBADHANDLE",
        522 => "ENOTSYNC",
        523 => "EBADCOOKIE",
        524 => "ENOTSUPP",
        525 => "ETOOSMALL",
        526 => "ESERVERFAULT",
        527 => "EBADTYPE",
        528 => "EJUKEBOX",
        529 => "EIOCBQUEUED",
        530 => "ERECALLCONFLICT"
    );
    
    
    %errcode = (
        EPERM => "Operation not permitted",
        ENOENT => "No such file or directory",
        ESRCH => "No such process",
        EINTR => "Interrupted system call",
        EIO => "I/O error",
        ENXIO => "No such device or address",
        E2BIG => "Argument list too long",
        ENOEXEC => "Exec format error",
        EBADF => "Bad file number",
        ECHILD => "No child processes",
        EAGAIN => "Try again",
        ENOMEM => "Out of memory",
        EACCES => "Permission denied",
        EFAULT => "Bad address",
        ENOTBLK => "Block device required",
        EBUSY => "Device or resource busy",
        EEXIST => "File exists",
        EXDEV => "Cross-device link",
        ENODEV => "No such device",
        ENOTDIR => "Not a directory",
        EISDIR => "Is a directory",
        EINVAL => "Invalid argument",
        ENFILE => "File table overflow",
        EMFILE => "Too many open files",
        ENOTTY => "Not a typewriter",
        ETXTBSY => "Text file busy",
        EFBIG => "File too large",
        ENOSPC => "No space left on device",
        ESPIPE => "Illegal seek",
        EROFS => "Read-only file system",
        EMLINK => "Too many links",
        EPIPE => "Broken pipe",
        EDOM => "Math argument out of domain of function",
        ERANGE => "Math result not representable",
        EDEADLK => "Resource deadlock would occur",
        ENAMETOOLONG => "File name too long",
        ENOLCK => "No record locks available",
        ENOSYS => "Function not implemented/Invalid system call number",
        ENOTEMPTY => "Directory not empty",
        ELOOP => "Too many symbolic links encountered",
        ENOMSG => "No message of desired type",
        EIDRM => "Identifier removed",
        ECHRNG => "Channel number out of range",
        EL2NSYNC => "Level 2 not synchronized",
        EL3HLT => "Level 3 halted",
        EL3RST => "Level 3 reset",
        ELNRNG => "Link number out of range",
        EUNATCH => "Protocol driver not attached",
        ENOCSI => "No CSI structure available",
        EL2HLT => "Level 2 halted",
        EBADE => "Invalid exchange",
        EBADR => "Invalid request descriptor",
        EXFULL => "Exchange full",
        ENOANO => "No anode",
        EBADRQC => "Invalid request code",
        EBADSLT => "Invalid slot",
        EBFONT => "Bad font file format",
        ENOSTR => "Device not a stream",
        ENODATA => "No data available",
        ETIME => "Timer expired",
        ENOSR => "Out of streams resources",
        ENONET => "Machine is not on the network",
        ENOPKG => "Package not installed",
        EREMOTE => "Object is remote",
        ENOLINK => "Link has been severed",
        EADV => "Advertise error",
        ESRMNT => "Srmount error",
        ECOMM => "Communication error on send",
        EPROTO => "Protocol error",
        EMULTIHOP => "Multihop attempted",
        EDOTDOT => "RFS specific error",
        EBADMSG => "Not a data message",
        EOVERFLOW => "Value too large for defined data type",
        ENOTUNIQ => "Name not unique on network",
        EBADFD => "File descriptor in bad state",
        EREMCHG => "Remote address changed",
        ELIBACC => "Can not access a needed shared library",
        ELIBBAD => "Accessing a corrupted shared library",
        ELIBSCN => ".lib section in a.out corrupted",
        ELIBMAX => "Attempting to link in too many shared libraries",
        ELIBEXEC => "Cannot exec a shared library directly",
        EILSEQ => "Illegal byte sequence",
        ERESTART => "Interrupted system call should be restarted",
        ESTRPIPE => "Streams pipe error",
        EUSERS => "Too many users",
        ENOTSOCK => "Socket operation on non-socket",
        EDESTADDRREQ => "Destination address required",
        EMSGSIZE => "Message too long",
        EPROTOTYPE => "Protocol wrong type for socket",
        ENOPROTOOPT => "Protocol not available",
        EPROTONOSUPPORT => "Protocol not supported",
        ESOCKTNOSUPPORT => "Socket type not supported",
        EOPNOTSUPP => "Operation not supported on transport endpoint",
        EPFNOSUPPORT => "Protocol family not supported",
        EAFNOSUPPORT => "Address family not supported by protocol",
        EADDRINUSE => "Address already in use",
        EADDRNOTAVAIL => "Cannot assign requested address",
        ENETDOWN => "Network is down",
        ENETUNREACH => "Network is unreachable",
        ENETRESET => "Network dropped connection because of reset",
        ECONNABORTED => "Software caused connection abort",
        ECONNRESET => "Connection reset by peer",
        ENOBUFS => "No buffer space available",
        EISCONN => "Transport endpoint is already connected",
        ENOTCONN => "Transport endpoint is not connected",
        ESHUTDOWN => "Cannot send after transport endpoint shutdown",
        ETOOMANYREFS => "Too many references: cannot splice",
        ETIMEDOUT => "Connection timed out",
        ECONNREFUSED => "Connection refused",
        EHOSTDOWN => "Host is down",
        EHOSTUNREACH => "No route to host",
        EALREADY => "Operation already in progress",
        EINPROGRESS => "Operation now in progress",
        ESTALE => "Stale file handle",
        EUCLEAN => "Structure needs cleaning",
        ENOTNAM => "Not a XENIX named type file",
        ENAVAIL => "No XENIX semaphores available",
        EISNAM => "Is a named type file",
        EREMOTEIO => "Remote I/O error",
        EDQUOT => "Quota exceeded",
        ENOMEDIUM => "No medium found",
        EMEDIUMTYPE => "Wrong medium type",
        ECANCELED => "Operation Canceled",
        ENOKEY => "Required key not available",
        EKEYEXPIRED => "Key has expired",
        EKEYREVOKED => "Key has been revoked",
        EKEYREJECTED => "Key was rejected by service",
        EOWNERDEAD => "Owner died",
        ENOTRECOVERABLE => "State not recoverable",
        ERFKILL => "Operation not possible due to RF-kill",
        EHWPOISON => "Memory page has hardware error",
        ERESTARTNOHAND => "restart if no handler..",
        ENOIOCTLCMD => "No ioctl command",
        ERESTART_RESTARTBLOCK => "restart by calling sys_restart_syscall",
        EPROBE_DEFER => "Driver requests probe retry",
        EOPENSTALE => "open found a stale dentry",
        EBADHANDLE => "Illegal NFS file handle",
        ENOTSYNC => "Update synchronization mismatch",
        EBADCOOKIE => "Cookie is stale",
        ENOTSUPP => "Operation is not supported",
        ETOOSMALL => "Buffer or request is too small",
        ESERVERFAULT => "An untranslatable error occurred",
        EBADTYPE => "Type not supported by server",
        EJUKEBOX => "Request initiated, but will not complete before timeout",
        EIOCBQUEUED => "iocb queued, will get completion event",
        ERECALLCONFLICT => "conflict with recalled state"
    );
    
    if ( -f "$ignorefile" ) {
        open( IG, '<', "$ignorefile" );
        while (<IG>) {
            chomp;
            next if ( $_ =~ /^#/ );
            ( $ignorekey, $ignorestring ) = split( /=/, $_ );
            $ignorekey =~ s/(^\s+|\s+$)//g;
            $ignorestring =~ s/(^\s+|\s+$)//g;
            push( @{ $ignores{$ignorekey} }, $ignorestring );
        }
        close(IG);
    }

  INPUT:
    while (<STDIN>) {
        chomp;
        $event = $_;
        if ( $event =~ m|^node=(\S+) type=(\S+) msg=audit\(\d+\.\d+:(\d+)\): | ) {
            $auditid            = $3;
            $sh{$auditid}{node} = $1;
            $sh{$auditid}{type} = $2;

            $sh{$auditid}{auditid}  = $auditid;
            # don't log myself
            # check early to avoid unneccesary cpu usage
            $sh{$auditid}{pid}      = $1 if ( $event =~ m| pid=(\d+)| );
            $sh{$auditid}{ppid}     = $1 if ( $event =~ m| ppid=(\d+)| );
            if ( $$ == ( defined $sh{$auditid}{pid} ? $sh{$auditid}{pid} : 0 ) ) {
                next INPUT;
            }
            if ( $$ == ( defined $sh{$auditid}{ppid} ? $sh{$auditid}{ppid} : 0 ) ) {
                next INPUT;
            }
            $sh{$auditid}{epoch}     = time;
            $sh{$auditid}{date}      = strftime "%Y-%m-%d", localtime(time);
            $sh{$auditid}{time}      = strftime "%H:%M:%S%z", localtime(time);
            $sh{$auditid}{acct}      = $1 if ( $event =~ m| acct=(\S+)| );
            $sh{$auditid}{acct}      = pack( "H*", "$1" ) if ( $sh{$auditid}{acct} =~ m|^([A-F0-9]+)$| );
            $sh{$auditid}{addr}      = $1 if ( $event =~ m| addr=(\S+)| );
            $sh{$auditid}{comm}      = $1 if ( $event =~ m| comm=(\S+)| );
            $sh{$auditid}{cmd}       = $1 if ( $event =~ m| cmd=(\S+)| );
            $sh{$auditid}{cmd}       = pack( "H*", "$1" ) if ( $sh{$auditid}{cmd} =~ m|^([A-F0-9]+)$| );
            $sh{$auditid}{cwd}       = $1 if ( $event =~ m|'cwd=(\S+)| );
            $sh{$auditid}{cwd}       = pack( "H*", "$1" ) if ( $sh{$auditid}{cwd} =~ m|^([A-F0-9]+)$| );
            $sh{$auditid}{exe}       = $1 if ( $event =~ m| exe=(\S+)| );
            $sh{$auditid}{exe}       = pack( "H*", "$1" ) if ( $sh{$auditid}{exe} =~ m|^([A-F0-9]+)$| );
            $sh{$auditid}{exit}      = $1 if ( $event =~ m| exit=(\S+)| );
            $sh{$auditid}{hostname}  = $1 if ( $event =~ m| hostname=(\S+)| );
            $sh{$auditid}{key}       = $1 if ( $event =~ m| key="(\S+)"| );
            $sh{$auditid}{name}      = $1 if ( $event =~ m| name=(\S+)| );
            $sh{$auditid}{name}      = pack( "H*", "$1" ) if ( $sh{$auditid}{name} =~ m|^([A-F0-9]+)$| );
            $sh{$auditid}{proctitle} = $1 if ( $event =~ m| proctitle=(\S+)| );
            $sh{$auditid}{proctitle} = pack( "H*", "$1" ) if ( $sh{$auditid}{proctitle} =~ m|^([A-F0-9]+)$| );
            $sh{$auditid}{proctitle} =~ s|| |g;
            $sh{$auditid}{res}       = $1 if ( $event =~ m| res=(\d+)| );
            $sh{$auditid}{result}    = $1 if ( $event =~ m| result=(\d+)| );
            $sh{$auditid}{ses}       = $1 if ( $event =~ m| ses=(\d+)| );
            $sh{$auditid}{success}   = $1 if ( $event =~ m| success=(\S+)| );
            $sh{$auditid}{terminal}  = $1 if ( $event =~ m| terminal=(\S+)| );
            $sh{$auditid}{tty}       = $1 if ( $event =~ m| tty=(\S+)| );
            $sh{$auditid}{vm}        = $1 if ( $event =~ m| vm=(\S+)| );
            $sh{$auditid}{uid}       = $1 if ( $event =~ m| uid=(\d+)| );
            $sh{$auditid}{uid_user}  = &uid_to_user($1) if ( $event =~ m| uid=(\d+)| );
            $sh{$auditid}{auid}      = $1 if ( $event =~ m| auid=(\d+)| );
            $sh{$auditid}{auid_user} = &uid_to_user($1) if ( $event =~ m| auid=(\d+)| );

            if ( $event =~ m| exit=\D?(\d+)| ) {
                if ( defined $errno{$1} ) {
                    $sh{$auditid}{errcode} = $errno{$1};
                    $sh{$auditid}{errdesc} = qq("$errcode{$sh{$auditid}{errcode}}");
                }
            }
            if ( $event =~ m| saddr=([A-F0-9]+)| ) {
                $saddr = $1;
                &xlate_saddr( $saddr, \$sh{$auditid}{saddr}, \$sh{$auditid}{port} );
            }

            if ( $event =~ m| argc=(\d+)| ) {
                $argc = $1;
                $args = $1 if ( $event =~ m| argc=\d+( .*)| );
                if ( $argc > ( defined $sh{$auditid}{argc} ? $sh{$auditid}{argc} : 0 ) ) {
                    # Sometimes there are more than 1 EXECVE lines with missing args.
                    # Choose the highest argc.
                    $sh{$auditid}{argc} = $argc;
                }
                else {
                    next INPUT;
                }
                @command = split( /\s+a\d+=/, $args );
                @cleancmd = '';
                foreach $cmd (@command) {
                    if ( $cmd =~ m|^([A-F0-9]+)$| ) {
                        $cmd = pack( "H*", "$1" );
                    }
                    $cmd =~ s/(^"|"$|^\s+|\s+$)//g;
                    push( @cleancmd, $cmd );
                }

                $sh{$auditid}{command} = join( ' ', @cleancmd );
                $sh{$auditid}{command} =~ s/(^\s+|\s+$)//g;
                $sh{$auditid}{command} =~ s|\n| |g;
                $sh{$auditid}{command} =~ s|\s+| |g;
            }
        }

      AUDITID:
        foreach $auditid ( sort( keys %sh ) ) {

            # audits do not arrive in order.
            # wait a few seconds before logging.
            next AUDITID if ( time < $sh{$auditid}{epoch} + 3 );

            # only log entries with a user-defined key
            unless ( defined $sh{$auditid}{key} ) {
                delete $sh{$auditid};
                next AUDITID;
            }

            foreach $ignorekey ( keys %ignores ) {
                foreach $ignorestring ( @{ $ignores{$ignorekey} } ) {
                    if ( $sh{$auditid}{$ignorekey} =~ m|$ignorestring| ) {
                        delete $sh{$auditid};
                        next AUDITID;
                    }
                }
            }

            $log = '';
            foreach $subkey ( sort ( keys %{ $sh{$auditid} } ) ) {
                next if ( $subkey eq "argc" );
                $sh{$auditid}{$subkey} =~ s|"||g;
                $log .= qq($subkey="$sh{$auditid}{$subkey}" );
            }
            $log .= qq(\n);
            open( LOGFILE, ">>", "$logfile" ) and do {
                print LOGFILE $log;
                close(LOGFILE);
            };
            delete $sh{$auditid};

        }
    }

    return 0;

}

#################################################################################
sub uid_to_user {

    my $uid = shift;
    my $user;

    unless ( $user = getpwuid($uid) ) {
        if ( $uid == 4294967295 ) {
            $user = '';
        }
        else {
            $user = $uid;
        }
    }

    return $user;
}
#################################################################################

#################################################################################
sub xlate_saddr {
    my $saddr   = shift;
    my $r_saddr = shift;
    my $r_port  = shift;
    my $fam1;
    my $fam2;
    my $family;
    my $port1;
    my $port2;
    my @addr;
    my $port;
    my @ipparts;
    my $ip;
    my $junk;
    my $ip6;
    my @ip6a;

    ( $fam1, $fam2, $port1, $port2, @addr ) = unpack( "A2A2A2A2A2A2A2A2", $saddr );
    $family = hex($fam1) + 256 * hex($fam2);
    if ( $family == 10 ) {
        ( $junk, $port1, $port2, $junk, $ip6 ) = unpack( "A4A2A2A8A32", $saddr );
        $port = 256 * hex($port1) + hex($port2);
        @ip6a = split( //, $ip6 );
        if ( "@ip6a[20 .. 23]" eq "F F F F" ) {

            # is really ipv4 in ipv6 notation
            ( $junk, @addr ) = unpack( "A40A2A2A2A2", $saddr );
            $ip       = hex( $addr[0] ) . '.' . hex( $addr[1] ) . '.' . hex( $addr[2] ) . '.' . hex( $addr[3] );
            $$r_saddr = ':::::FFFF:' . $ip;
            $$r_port  = $port;
        }
        else {
            $ip6 = "@ip6a[0 .. 3]" . ':';
            $ip6 .= "@ip6a[4 .. 7]" . ':';
            $ip6 .= "@ip6a[8 .. 11]" . ':';
            $ip6 .= "@ip6a[12 .. 15]" . ':';
            $ip6 .= "@ip6a[16 .. 19]" . ':';
            $ip6 .= "@ip6a[20 .. 23]" . ':';
            $ip6 .= "@ip6a[24 .. 27]" . ':';
            $ip6 .= "@ip6a[28 .. 31]";
            $ip6 =~ s/\s+//g;
            $ip6 =~ s/0000//g;
            $$r_saddr = $ip6;
            $$r_port  = $port;
        }
    }
    elsif ( $family == 2 ) {
        $port     = 256 * hex($port1) + hex($port2);
        $ip       = hex( $addr[0] ) . '.' . hex( $addr[1] ) . '.' . hex( $addr[2] ) . '.' . hex( $addr[3] );
        $$r_saddr = $ip;
        $$r_port  = $port;
    }
    elsif ( $family == 1 ) {
        $saddr =~ s/(^01..|00.+$)//g;
        $$r_saddr = pack( "H*", "$saddr" );
    }
    if ( $saddr == 100000000000000000000000 ) {
        $$r_saddr = 'netlink pid:0';
    }
    return 0;
}

#################################################################################

__END__
